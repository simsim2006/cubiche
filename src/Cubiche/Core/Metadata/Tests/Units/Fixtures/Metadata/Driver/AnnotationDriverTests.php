<?php

/**
 * This file is part of the Cubiche package.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units\Tests\Fixtures\Metadata\Driver;

use Cubiche\Core\Metadata\Driver\AbstractAnnotationDriver;
use Cubiche\Core\Metadata\Tests\Fixtures\Metadata\ClassMetadata;
use Cubiche\Core\Metadata\Tests\Fixtures\Metadata\Driver\AnnotationDriver;
use Cubiche\Core\Metadata\Tests\Fixtures\Metadata\PropertyMetadata;
use Cubiche\Core\Metadata\Tests\Fixtures\WriteModel\Company;
use Cubiche\Core\Metadata\Tests\Units\Driver\AnnotationDriverTestCase;
use Doctrine\Common\Annotations\AnnotationReader;
use Doctrine\Common\Annotations\AnnotationRegistry;

/**
 * AnnotationDriverTests class.
 *
 * Generated by TestGenerator on 2016-11-01 at 12:47:41.
 */
class AnnotationDriverTests extends AnnotationDriverTestCase
{
    /**
     * @param array $paths
     *
     * @return AbstractAnnotationDriver
     */
    protected function createAnnotationDriver(array $paths = [])
    {
        AnnotationRegistry::registerFile(
            __DIR__.'/../../../../Fixtures/Metadata/Annotations/Projection.php'
        );

        AnnotationRegistry::registerFile(
            __DIR__.'/../../../../Fixtures/Metadata/Annotations/Property.php'
        );

        return new AnnotationDriver(new AnnotationReader(), $paths);
    }

    /**
     * Test loadMetadataForClass method.
     */
    public function testLoadMetadataForClass()
    {
        $this
            ->given($driver = $this->createAnnotationDriver())
            ->when($classMetadata = $driver->loadMetadataForClass(new \ReflectionClass(Company::class)))
            ->then()
                ->object($classMetadata)
                    ->isInstanceOf(ClassMetadata::class)
                ->string($classMetadata->targetClass)
                    ->isEqualTo('DDD\UI\ReadModel\Company')
                ->array($classMetadata->propertyMetadata)
                    ->hasSize(2)
                ->object($classMetadata->propertyMetadata['id'])
                    ->isInstanceOf(PropertyMetadata::class)
                ->object($classMetadata->propertyMetadata['name'])
                    ->isInstanceOf(PropertyMetadata::class)
                ->string($classMetadata->propertyMetadata['id']->projectionName)
                    ->isEqualTo('companyId')
                ->string($classMetadata->propertyMetadata['name']->projectionName)
                    ->isEqualTo('companyName')
        ;
    }
}
