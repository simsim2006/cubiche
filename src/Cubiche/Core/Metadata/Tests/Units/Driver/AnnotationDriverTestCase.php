<?php

/**
 * This file is part of the Cubiche/Metadata component.
 *
 * Copyright (c) Cubiche
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cubiche\Core\Metadata\Tests\Units\Driver;

use Cubiche\Core\Metadata\Driver\AbstractAnnotationDriver;
use Cubiche\Core\Metadata\Exception\MappingException;
use Cubiche\Core\Metadata\Tests\Units\TestCase;

/**
 * AnnotationDriverTestCase class.
 *
 * Generated by TestGenerator on 2016-11-01 at 12:47:41.
 */
abstract class AnnotationDriverTestCase extends TestCase
{
    /**
     * @param array $paths
     *
     * @return AbstractAnnotationDriver
     */
    abstract protected function createAnnotationDriver(array $paths = []);

    /**
     * Test constructor.
     */
    public function testCreate()
    {
        $this
            ->given($driver = $this->createAnnotationDriver())
            ->then()
                ->object($driver)
                    ->isInstanceOf(AbstractAnnotationDriver::class)
        ;
    }

    /**
     * Test AddPaths method.
     */
    public function testAddPaths()
    {
        $this
            ->given($driver = $this->createAnnotationDriver())
            ->then()
                ->array($driver->paths())
                    ->isEmpty()
                ->and()
                ->when($driver->addPaths([__DIR__.'/../../Fixtures']))
                ->then()
                    ->array($driver->paths())
                        ->hasSize(1)
                ->and()
                ->when($driver->addPaths([__DIR__.'/../../Units']))
                ->then()
                    ->array($driver->paths())
                        ->hasSize(2)
                ->when($driver->addPaths([__DIR__.'/../../Fixtures']))
                ->then()
                    ->array($driver->paths())
                        ->hasSize(2)
        ;
    }

    /**
     * Test AddExcludePaths method.
     */
    public function testAddExcludePaths()
    {
        $this
            ->given($driver = $this->createAnnotationDriver())
            ->then()
                ->array($driver->excludePaths())
                    ->isEmpty()
                ->and()
                ->when($driver->addExcludePaths([__DIR__.'/../../Fixtures']))
                ->then()
                    ->array($driver->excludePaths())
                        ->hasSize(1)
                ->and()
                ->when($driver->addExcludePaths([__DIR__.'/../../Units']))
                ->then()
                    ->array($driver->excludePaths())
                        ->hasSize(2)
                ->when($driver->addExcludePaths([__DIR__.'/../../Fixtures']))
                ->then()
                    ->array($driver->excludePaths())
                        ->hasSize(2)
        ;
    }

    /**
     * Test GetAllClassNames method.
     */
    public function testGetAllClassNames()
    {
        $this
            ->given($driver = $this->createAnnotationDriver())
            ->then()
                ->exception(function () use ($driver) {
                    $driver->getAllClassNames();
                })->isInstanceOf(MappingException::class)
            ->and()
            ->when($driver->addPaths([__DIR__.'/../../Fixtures/Invalid']))
            ->then()
                ->exception(function () use ($driver) {
                    $driver->getAllClassNames();
                })->isInstanceOf(MappingException::class)
        ;

        $this
            ->given($driver = $this->createAnnotationDriver([__DIR__.'/../../Fixtures/WriteModel']))
            ->and($driver->addExcludePaths([__DIR__.'/../../Fixtures/WriteModel/SubFolder']))
            ->then()
                ->array($driver->getAllClassNames())
                    ->hasSize(1)
                ->and()
                ->array($driver->getAllClassNames())
                    ->hasSize(1)
        ;

        $this
            ->given($driver = $this->createAnnotationDriver([__DIR__.'/../../Fixtures/WriteModel']))
            ->and($driver->addExcludePaths([__DIR__.'/../../Fixtures/WriteModel/SubFolder']))
            ->and($driver->setFileExtension('.html'))
            ->then()
                ->array($driver->getAllClassNames())
                    ->isEmpty()
        ;
    }
}
